{% extends 'backend/baseBack.html.twig' %}

{% block content %}
<style>
    .ai-custom-icon {
        width: 20px;
        height: 20px;
        object-fit: contain;
        vertical-align: middle;
    }
    
    .form-label {
        font-weight: 600;
        margin-bottom: 8px;
        color: #495057;
    }
    .ai-feedback {
        border-left: 4px solid #ffc107;
        background-color: #fffbea;
        padding: 10px 15px;
        border-radius: 5px;
        margin-top: 10px;
        font-size: 0.9rem;
    }
    .action-buttons {
        display: flex;
        gap: 80px;
        align-items: center;
        margin: 30px 0;
        justify-content: center;
        padding-left: 15px;
    }
    .action-buttons .btn {
        padding: 12px 25px;
        font-size: 1rem;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        min-width: 290px;
    }
    .image-upload-container {
        border: 2px dashed #dee2e6;
        border-radius: 8px;
        padding: 25px;
        text-align: center;
        background-color: #f8f9fa;
        transition: all 0.3s ease;
        margin: 20px 0;
    }
    .image-upload-container:hover {
        border-color: #4361ee;
        background-color: #f0f5ff;
    }
    .image-upload-icon {
        font-size: 2.5rem;
        color: #4361ee;
        margin-bottom: 10px;
    }
    .image-preview {
        max-width: 200px;
        max-height: 200px;
        margin: 15px auto;
        display: block;
        border-radius: 5px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .create-title {
        font-size: 2rem;
        font-weight: 700;
        color: #3a3a3a;
        margin-bottom: 25px;
        border-bottom: 2px solid #e0e0e0;
        padding-bottom: 10px;
    }
    .form-control, .form-select {
        padding: 12px 15px;
        border-radius: 8px;
        border: 1px solid #ced4da;
        transition: all 0.3s;
    }
    .form-control:focus, .form-select:focus {
        border-color: #4361ee;
        box-shadow: 0 0 0 0.2rem rgba(67, 97, 238, 0.25);
    }
    .card {
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0,0,0,0.08);
        border: none;
    }
    .form-row {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        margin-bottom: 20px;
    }
    .form-field {
        flex: 1;
        min-width: 200px;
        margin-bottom:30px;
        margin-top:20px;

    }
    .btn-warning {
        background-color: #ffc107;
        border-color: #ffc107;
    }
    .btn-warning:hover {
        background-color: #e0a800;
        border-color: #d39e00;
    }
    .card-body{
        background-color:#edf2fa;
    }
</style>

<div class="container mt-5">
    <div class="card shadow">
        <div class="card-body p-5">
            <div>
                <a href="{{ path('items') }}" class="btn btn-outline-dark" style="margin-bottom:50px;">
                    <i class="fas fa-arrow-left me-2"></i> Back to Items
                </a>
            </div>
            <h2 class="create-title" style="margin-bottom:30px;">✏️ Edit Item</h2>

            {{ form_start(form, {'attr': {'enctype': 'multipart/form-data'}}) }}
            <div class="form-row">
                    <div class="form-field">
                        {{ form_label(form.nameItem) }}
                        {{ form_widget(form.nameItem, {'attr': {'class': 'form-control', 'placeholder': 'Enter item name'}}) }}
                    </div>
                    <div class="form-field">
                        {{ form_label(form.categoryItem) }}
                        {{ form_widget(form.categoryItem, {'attr': {'class': 'form-control'}}) }}
                    </div>
                    <div class="form-field">
                        {{ form_label(form.pricePerUnitItem) }}
                        <div class="input-group">
                            <span class="input-group-text">TND</span>
                            {{ form_widget(form.pricePerUnitItem, {'attr': {'class': 'form-control', 'placeholder': '0.00'}}) }}
                        </div>
                    </div>
                </div>
                <div class="d-flex justify-content-center align-items-start gap-5 flex-wrap">
                    <div class="text-center">
                        <img src="{{ asset('images/' ~ originalNameItem|url_encode ~ '.png') }}" class="image-preview" alt="Current Image">
                        <p class="text-muted mt-2">Current image</p>
                        <button type="button" id="toggleImageUpload" class="btn btn-outline-info mt-2">
                            <i class="fas fa-image me-2"></i> Change Image
                        </button>
                    </div>
                
                    <div class="image-upload-container">
                        <div id="uploadImageSection" class="d-none mt-4 text-center">
                            <div class="image-upload-icon">
                                <i class="fas fa-cloud-upload-alt"></i>
                            </div>
                            <h5>Upload New Image</h5>
                            <p class="text-muted">Recommended size: 800x800px (JPG, PNG)</p>
                            {{ form_widget(form.image, {'attr': {'class': 'd-none'}}) }}
                            <label for="{{ form.image.vars.id }}" class="btn btn-outline-primary mt-2">
                                <i class="fas fa-folder-open me-2"></i> Browse Files
                            </label>
                        </div>
                    </div>
                
                    <div id="imagePreviewContainer"></div>
                    <div id="imagePathMessage" class="mt-3"></div>
                </div>
                
                

                <div class="action-buttons">
                    <button type="button" class="btn btn-warning" id="checkPriceBtn">
                        <img src="{{ asset('images/ai-icon.png') }}" alt="WattAI Icon" class="ai-custom-icon me-2">
                        AI Auto-Fill
                    </button>

                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-2"></i> Update Item
                    </button>

                    <button type="reset" class="btn btn-outline-secondary" id="clearFormBtn">
                        <i class="fas fa-undo me-2"></i> Reset Changes
                    </button>
                </div>

            {{ form_end(form) }}
        </div>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
    $(document).ready(function () {
        // Image upload preview with enhanced UX
        $('#{{ form.image.vars.id }}').change(function() {
            const file = this.files[0];
            const previewContainer = $('#imagePreviewContainer');
            const messageContainer = $('#imagePathMessage');
            
            // Clear any previous messages
            messageContainer.empty();
    
            console.log("File input changed: ", file);  // Debugging the file input
    
            if (file) {
                console.log("File type: ", file.type);  // Debugging the file type
                if (!file.type.match('image.*')) {
                    previewContainer.html('<div class="alert alert-danger">Please select an image file</div>');
                    messageContainer.html('<div class="alert alert-danger">Invalid file type. Please select an image file.</div>');
                    console.error("Invalid file type. Expected image file.");
                    return;
                }
                
                if (file.size > 5 * 1024 * 1024) {
                    previewContainer.html('<div class="alert alert-danger">Image must be less than 5MB</div>');
                    messageContainer.html('<div class="alert alert-danger">File size exceeds 5MB.</div>');
                    console.error("File size too large. Must be under 5MB.");
                    return;
                }
    
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewContainer.html(`
                        <div class="text-center">
                            <img src="${e.target.result}" class="image-preview" alt="Preview">
                            <p class="text-success mt-2 mb-1">${file.name}</p>
                            <small class="text-muted">${(file.size/1024).toFixed(2)} KB</small>
                            <button class="btn btn-sm btn-outline-danger mt-2" id="removeImage">
                                <i class="fas fa-trash me-1"></i> Remove
                            </button>
                        </div>
                    `);
    
                    console.log("Image preview loaded: ", e.target.result);  // Debugging the preview
    
                    // Display selected image path and name
                    messageContainer.html(`
                        <div class="alert alert-info">
                            <strong>Selected File:</strong> ${file.name}<br>
                            <strong>File Path:</strong> ${file.name} located in <strong>Selected Files</strong>
                        </div>
                    `);
    
                    $('#removeImage').click(function() {
                        $('#{{ form.image.vars.id }}').val('');
                        previewContainer.empty();
                        messageContainer.empty();
                        console.log("Image removed. Input field cleared.");
                    });
                };
                reader.readAsDataURL(file);
                console.log("File is being read as data URL");
            } else {
                console.log("No file selected.");
            }


            // After the image preview is shown
            const itemName = $('#{{ form.nameItem.vars.id }}').val().trim();

            if (!itemName) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Item Name',
                    text: 'Please enter the item name before selecting an image.',
                    confirmButtonColor: '#4361ee',
                });
                $('#{{ form.image.vars.id }}').val('');
                previewContainer.empty();
                messageContainer.empty();
                return;
            }

            // Send image and item name to AI for validation
            const formData = new FormData();
            formData.append('image', file);
            formData.append('itemName', itemName);

            // Replace this with your actual backend API route
            fetch('/api/validate-image', {
                method: 'POST',
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.valid === true) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Image Validated',
                        text: 'The uploaded image matches the item name.',
                        confirmButtonColor: '#28a745',
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Image Rejected',
                        text: 'The image does not match the item name. Please try a different one.',
                        confirmButtonColor: '#dc3545',
                    });
                    $('#{{ form.image.vars.id }}').val('');
                    previewContainer.empty();
                    messageContainer.empty();
                }
            })
            .catch(error => {
                console.error('AI Validation Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Validation Failed',
                    text: 'Something went wrong while validating the image.',
                    confirmButtonColor: '#dc3545',
                });
                $('#{{ form.image.vars.id }}').val('');
                previewContainer.empty();
                messageContainer.empty();
            });
        });
    
        // Make the whole upload area clickable
        $('.image-upload-container').click(function(e) {
            if (!$(e.target).is('input,button,a')) {
                $('#{{ form.image.vars.id }}').click();
                console.log("Upload container clicked. Triggering file input.");
            }
        });
        
  

        // AI Price Check with enhanced UX
        $('#checkPriceBtn').on('click', async function () {
            const itemName = $('#{{ form.nameItem.vars.id }}').val().trim();
            
            if (!itemName) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Missing Information',
                    text: 'Please enter the item name first.',
                    confirmButtonColor: '#4361ee',
                });
                return;
            }
            
            const $btn = $(this);
            $btn.html('<i class="fas fa-spinner fa-spin me-2"></i> Analyzing...');
            $btn.prop('disabled', true);
    
            try {
                const aiResponse = await getGeminiPriceEstimate(itemName);
                
                if (aiResponse && aiResponse.suggestedPrice !== null && !isNaN(aiResponse.suggestedPrice)) {
                    const aiPrice = parseFloat(aiResponse.suggestedPrice);
                    const aiCategory = aiResponse.suggestedCategory || 'General';
                    const currentPrice = parseFloat($('#{{ form.pricePerUnitItem.vars.id }}').val()) || 0;
                    const diff = currentPrice - aiPrice;
                    const absDiff = Math.abs(diff).toFixed(2);
    
                    let comparisonMessage = '';
                    if (Math.abs(diff) <= 1.0) {
                        comparisonMessage = `✅ Your price is reasonable compared to market average`;
                    } else if (diff > 1.0) {
                        comparisonMessage = `⚠️ Your price is <strong>${absDiff} TND</strong> above market average`;
                    } else {
                        comparisonMessage = `⚠️ Your price is <strong>${absDiff} TND</strong> below market average`;
                    }
    
                    Swal.fire({
                        title: '🤖 AI Price Analysis',
                        html: `
                            <div class="text-start">
                                <div class="d-flex justify-content-between mb-2">
                                    <span><strong>Item:</strong></span>
                                    <span>${itemName}</span>
                                </div>
                                <div class="d-flex justify-content-between mb-2">
                                    <span><strong>Suggested Price:</strong></span>
                                    <span class="fw-bold">${aiPrice.toFixed(2)} TND</span>
                                </div>
                                <div class="d-flex justify-content-between mb-3">
                                    <span><strong>Suggested Category:</strong></span>
                                    <span>${aiCategory}</span>
                                </div>
                                <hr>
                                <p>${comparisonMessage}</p>
                                <p class="mt-3">Apply these suggestions to your form?</p>
                            </div>
                        `,
                        icon: 'info',
                        showCancelButton: true,
                        confirmButtonText: '✅ Apply',
                        cancelButtonText: '✖️ Keep Current',
                        confirmButtonColor: '#28a745',
                        cancelButtonColor: '#dc3545',
                        reverseButtons: true,
                        focusCancel: true,
                        customClass: {
                            popup: 'border-radius-12'
                        }
                    }).then((result) => {
                        if (result.isConfirmed) {
                            $('#{{ form.pricePerUnitItem.vars.id }}').val(aiPrice.toFixed(2));
                            $('#{{ form.categoryItem.vars.id }}').val(aiCategory);
                            $('#priceComparisonResult')
                                .removeClass('d-none')
                                .html(`<span class="text-primary">✅ AI suggestions applied successfully!</span>`);
                        }
                    });
                } else {
                    throw new Error('Invalid AI response');
                }
            } catch (err) {
                Swal.fire({
                    icon: 'error',
                    title: 'Analysis Failed',
                    text: 'Could not get AI suggestions. Please try again later.',
                    confirmButtonColor: '#4361ee',
                });
            } finally {
                $btn.html('<i class="fas fa-robot me-2"></i> AI Auto-Fill');
                $btn.prop('disabled', false);
            }
        });

        // 🔍 Item name uniqueness + AI car relevance
        $('#{{ form.nameItem.vars.id }}').on('blur', async function () {
            const itemName = $(this).val().trim();
            const originalName = '{{ originalNameItem|e('js') }}'; // passed from controller
        
            if (!itemName || itemName.toLowerCase() === originalName.toLowerCase()) {
                $(this).removeClass('is-invalid');
                return; // Skip check if unchanged
            }
        
            try {
                const checkExistRes = await fetch('/items/check-name', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ name: itemName })
                });
        
                const exists = await checkExistRes.json();
                if (exists.exists) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Item Already Exists',
                        text: 'An item with this name already exists in the database!',
                        confirmButtonColor: '#dc3545',
                    });
                    $(this).addClass('is-invalid');
                } else {
                    $(this).removeClass('is-invalid');
                }
            } catch (error) {
                console.error('Error checking name uniqueness:', error);
            }
        });
        

        // 📝 Category must be all letters
        $('#{{ form.categoryItem.vars.id }}').on('input', function () {
            const value = $(this).val();
            const isValid = /^[A-Za-z\s]+$/.test(value);
            if (!isValid) {
                $(this).addClass('is-invalid');
            } else {
                $(this).removeClass('is-invalid');
            }
        });

        // 💰 Price must be a float > 0
        $('#{{ form.pricePerUnitItem.vars.id }}').on('input', function () {
            const value = parseFloat($(this).val());
            if (isNaN(value) || value <= 0) {
                $(this).addClass('is-invalid');
            } else {
                $(this).removeClass('is-invalid');
            }
        });

        $('form').on('submit', function (e) {
            const nameValid = !$('#{{ form.nameItem.vars.id }}').hasClass('is-invalid');
            const categoryValid = !$('#{{ form.categoryItem.vars.id }}').hasClass('is-invalid');
            const priceValid = !$('#{{ form.pricePerUnitItem.vars.id }}').hasClass('is-invalid');
        
            if (!(nameValid && categoryValid && priceValid)) {
                e.preventDefault();
                Swal.fire({
                    icon: 'warning',
                    title: 'Form Incomplete',
                    text: 'Please correct the highlighted fields before submitting.',
                });
            }
        });
        
    });
    
        async function getGeminiPriceEstimate(itemName) {
            // Simulate API delay for demo
            await new Promise(resolve => setTimeout(resolve, 1500));
            
            
            
            // Actual implementation would be:
            
            const response = await fetch('/ai/suggest-price', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ itemName: itemName })
            });
            return await response.json();
            
        }
        // Toggle image upload section
$('#toggleImageUpload').on('click', function () {
    $('#uploadImageSection').toggleClass('d-none');
});

</script>
{% endblock %}
