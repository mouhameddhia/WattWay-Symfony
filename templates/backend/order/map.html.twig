<!DOCTYPE html>
<html>
<head>
    <title>Supplier Selection | Procurement System</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-color: #3498db;
            --secondary-color: #2c3e50;
            --success-color: #2ecc71;
            --light-gray: #f8f9fa;
            --dark-gray: #343a40;
        }
        
        html, body, #map {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            font-family: 'Segoe UI', 'Helvetica Neue', Arial, sans-serif;
        }
        
        body {
            overflow: hidden;
            background-color: var(--light-gray);
        }
        
        .supplier-header {
            position: absolute;
            top: 20px;
            left: 20px;
            right: 20px;
            z-index: 1000;
            background: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border-left: 4px solid var(--primary-color);
        }
        
        .select-btn-container {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 1000;
            display: none;
            width: 90%;
            max-width: 400px;
            text-align: center;
            background: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            animation: fadeIn 0.3s ease-out;
        }
        
        .supplier-selection-info {
            margin-bottom: 12px;
            font-size: 0.9rem;
            color: var(--dark-gray);
        }
        
        .btn-select-supplier {
            width: 100%;
            padding: 12px;
            font-weight: 600;
            background-color: var(--primary-color);
            border: none;
            transition: all 0.2s;
        }
        
        .btn-select-supplier:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }
        
        .btn-select-supplier:active {
            transform: translateY(0);
        }
        
        .leaflet-popup-content {
            margin: 12px;
            min-width: 220px;
        }
        
        .leaflet-popup-content b {
            color: var(--secondary-color);
            font-size: 1.1em;
            display: block;
            margin-bottom: 8px;
        }
        
        .supplier-info {
            margin: 8px 0;
            line-height: 1.5;
        }
        
        .supplier-address {
            color: #555;
            font-size: 0.9em;
        }
        
        .leaflet-control-container .leaflet-control {
            margin-right: 15px;
            margin-top: 15px;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translate(-50%, 10px); }
            to { opacity: 1; transform: translate(-50%, 0); }
        }
        
        .loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 1000;
            background: rgba(255,255,255,0.9);
            padding: 20px 30px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            text-align: center;
        }
        
        .loading-spinner {
            border: 4px solid rgba(0,0,0,0.1);
            border-radius: 50%;
            border-top: 4px solid var(--primary-color);
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="supplier-header">
        <h4 class="mb-2"><i class="fas fa-map-marked-alt"></i> Supplier Selection</h4>
        <p class="mb-0 text-muted">Click on any supplier marker to view details and make selection</p>
    </div>
    
    <div id="map"></div>
    
    <div class="select-btn-container" id="selectBtnContainer">
        <div class="supplier-selection-info">
            <i class="fas fa-info-circle"></i> You've selected: <strong id="selectedSupplierName"></strong>
        </div>
        <button class="btn btn-select-supplier" id="selectSupplierBtn">
            <i class="fas fa-check-circle"></i> Confirm Selection
        </button>
    </div>
    
    <div class="loading-indicator" id="loadingIndicator">
        <div class="loading-spinner"></div>
        <p>Loading supplier data...</p>
    </div>

    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-control-geocoder/dist/Control.Geocoder.js"></script>
    <script>
        // Coordinates for ESPRIT Ariana
        const espritLat = 36.79656;
        const espritLng = 10.17981;
        let selectedSupplier = null;
        
        // Show loading indicator
        const loadingIndicator = document.getElementById('loadingIndicator');
        
        // Initialize the map centered on ESPRIT Ariana
        const map = L.map('map').setView([espritLat, espritLng], 13);
        
        // Add tile layer with nice styling
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);
        
        // Add scale control
        L.control.scale({position: 'bottomleft'}).addTo(map);
        
        // Create custom marker icons
        const espritLocationIcon = L.icon({
            iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
            iconSize: [30, 46],
            iconAnchor: [15, 46],
            popupAnchor: [1, -34],
            shadowSize: [46, 46]
        });
        
        const shopMarkerIcon = L.icon({
            iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-blue.png',
            iconSize: [30, 46],
            iconAnchor: [15, 46],
            popupAnchor: [1, -34],
            shadowSize: [46, 46]
        });
        
        // Add ESPRIT marker
        L.marker([espritLat, espritLng], { 
            icon: espritLocationIcon,
            title: "ESPRIT Ariana"
        }).addTo(map)
        .bindPopup(`
            <div class="supplier-info">
                <b>ESPRIT Ariana</b>
                <div class="supplier-address">Your current location</div>
            </div>
        `)
        .openPopup();
        
        // Function to show select button with supplier info
        function showSelectButton(supplier) {
            const btnContainer = document.getElementById('selectBtnContainer');
            const supplierName = document.getElementById('selectedSupplierName');
            
            supplierName.textContent = supplier.name;
            btnContainer.style.display = 'block';
            
            // Smooth scroll to button if needed
            btnContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
        }
        
        // Function to show notification
        function showNotification(message, type = 'info') {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} position-fixed top-20 start-50 translate-middle-x z-index-1100`;
            notification.style.minWidth = '300px';
            notification.style.textAlign = 'center';
            notification.innerHTML = `
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                ${message}
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                notification.classList.add('show');
            }, 10);
            
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => notification.remove(), 300);
            }, 3000);
        }
        
        // Load supplier data
        function loadSuppliers() {
            const overpassUrl = `https://overpass-api.de/api/interpreter?data=[out:json];(node["shop"](around:70000,${espritLat},${espritLng}););out;`;
            
            fetch(overpassUrl)
                .then(response => response.json())
                .then(data => {
                    if (data.elements.length > 0) {
                        let suppliersLoaded = 0;
                        
                        data.elements.forEach(function(store) {
                            const lat = store.lat;
                            const lon = store.lon;
                            const name = store.tags.name || 'Unnamed Store';
                            
                            if (name.toLowerCase().includes("auto") || 
                                name.toLowerCase().includes("batterie") || 
                                name.toLowerCase().includes("قطع") || 
                                name.toLowerCase().includes("غيار")) {
                                
                                fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`)
                                    .then(response => response.json())
                                    .then(addressData => {
                                        const address = addressData.display_name || 'Address not available';
                                        
                                        const marker = L.marker([lat, lon], { 
                                            icon: shopMarkerIcon,
                                            title: name
                                        }).addTo(map)
                                        .bindPopup(`
                                            <div class="supplier-info">
                                                <b>${name}</b>
                                                <div class="supplier-address">${address}</div>
                                            </div>
                                        `)
                                        .on('click', function() {
                                            selectedSupplier = {
                                                name: name,
                                                address: address,
                                                lat: lat,
                                                lng: lon
                                            };
                                            showSelectButton(selectedSupplier);
                                        });
                                        
                                        suppliersLoaded++;
                                        if (suppliersLoaded === data.elements.length) {
                                            loadingIndicator.style.display = 'none';
                                            showNotification(`${suppliersLoaded} suppliers loaded`, 'success');
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Error fetching address:', error);
                                        suppliersLoaded++;
                                    });
                            } else {
                                suppliersLoaded++;
                            }
                        });
                    } else {
                        loadingIndicator.style.display = 'none';
                        showNotification('No suppliers found in this area', 'warning');
                    }
                })
                .catch(error => {
                    console.error('Error fetching supplier data:', error);
                    loadingIndicator.innerHTML = `
                        <i class="fas fa-exclamation-triangle text-danger"></i>
                        <p>Error loading suppliers. Please try again.</p>
                        <button class="btn btn-sm btn-primary" onclick="window.location.reload()">
                            <i class="fas fa-sync-alt"></i> Retry
                        </button>
                    `;
                });
        }
        
        // Handle select button click
        document.getElementById('selectSupplierBtn').addEventListener('click', function() {
            if (selectedSupplier) {
                if (window.opener && !window.opener.closed) {
                    window.opener.postMessage({
                        type: 'supplierSelected',
                        supplier: {
                            name: selectedSupplier.name,
                            address: selectedSupplier.address
                        }
                    }, '*');
                    
                    showNotification('Supplier selected successfully!', 'success');
                    setTimeout(() => window.close(), 1000);
                } else {
                    showNotification('The order form window was closed. Please keep it open while selecting a supplier.', 'danger');
                }
            }
        });
        
        // Handle clicks anywhere on the map
        map.on('click', function(e) {
            const lat = e.latlng.lat;
            const lng = e.latlng.lng;
            
            fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
                .then(response => response.json())
                .then(data => {
                    const name = data.address?.shop || data.address?.amenity || 'Custom Location';
                    const address = data.display_name || `${lat.toFixed(4)}, ${lng.toFixed(4)}`;
                    
                    selectedSupplier = {
                        name: name,
                        address: address,
                        lat: lat,
                        lng: lng
                    };
                    showSelectButton(selectedSupplier);
                    
                    // Show temporary marker
                    const tempMarker = L.marker([lat, lng]).addTo(map)
                        .bindPopup(`<b>${name}</b><br>${address}`)
                        .openPopup();
                    
                    setTimeout(() => map.removeLayer(tempMarker), 3000);
                });
        });
        
        // Initialize the map
        document.addEventListener('DOMContentLoaded', function() {
            // Load suppliers after a brief delay to ensure map is fully initialized
            setTimeout(loadSuppliers, 500);
        });
    </script>
</body>
</html>






