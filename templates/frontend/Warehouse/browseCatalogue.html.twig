<!-- Stylesheets -->
<link rel="stylesheet" href="{{ asset('css/Warehouse/browseCatalogue.css') }}">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<!-- Basic Functionality Interface -->
<div id="catalogue-wrapper">
    <div class="bf-container">
            <div class="bf-buttons sliderDropdown">
                <button class="dropdown-filter-button" onclick="toggleDropdownFilterBrand()">
                    <h3 id="filter-model">Select brand <svg xmlns="http://www.w3.org/2000/svg" height=12 width=12 viewBox="0 0 320 512"><path fill="#fff" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg></h3>
                </button>
                <div class="sliderDropdown-content" id="dropdown-filter-brand">
                    <a href="#" class="brand-option" data-brand="all">All brands</a>
                    {% for brand in brands %}
                        <a href="#" class="brand-option" data-brand="{{ brand }}">{{ brand }}</a>
                    {% endfor %}
                </div>
            
            <button id="sort-btn" value="ASC" onclick="sortCars()">
                <h3 id="sort-h3">Sort by price <svg xmlns="http://www.w3.org/2000/svg" height=12 width=12 viewBox="0 0 320 512"><path fill="#fff" d="M2 334.5c-3.8 8.8-2 19 4.6 26l136 144c4.5 4.8 10.8 7.5 17.4 7.5s12.9-2.7 17.4-7.5l136-144c6.6-7 8.4-17.2 4.6-26s-12.5-14.5-22-14.5l-72 0 0-288c0-17.7-14.3-32-32-32L128 0C110.3 0 96 14.3 96 32l0 288-72 0c-9.6 0-18.2 5.7-22 14.5z"/></svg></h3>
            </button> 

            <button id="map-btn" onclick="toggleMapFilter()" style="width:75px;">
                <svg xmlns="http://www.w3.org/2000/svg" height=16 width=16 viewBox="0 0 576 512"><path fill="#fff" d="M408 120c0 54.6-73.1 151.9-105.2 192c-7.7 9.6-22 9.6-29.6 0C241.1 271.9 168 174.6 168 120C168 53.7 221.7 0 288 0s120 53.7 120 120zm8 80.4c3.5-6.9 6.7-13.8 9.6-20.6c.5-1.2 1-2.5 1.5-3.7l116-46.4C558.9 123.4 576 135 576 152l0 270.8c0 9.8-6 18.6-15.1 22.3L416 503l0-302.6zM137.6 138.3c2.4 14.1 7.2 28.3 12.8 41.5c2.9 6.8 6.1 13.7 9.6 20.6l0 251.4L32.9 502.7C17.1 509 0 497.4 0 480.4L0 209.6c0-9.8 6-18.6 15.1-22.3l122.6-49zM327.8 332c13.9-17.4 35.7-45.7 56.2-77l0 249.3L192 449.4 192 255c20.5 31.3 42.3 59.6 56.2 77c20.5 25.6 59.1 25.6 79.6 0zM288 152a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"/></svg>
            </button>
        </div>
        <div class="custom-slider-container">
        <div class="price-text">
            <h3>Price up to</h3>
            <h3 id="price-up-to">{{ maximumCarPrice }} DT</h3>
        </div>
        <input type="range" class="custom-slider" id="slider" min={{ minimumCarPrice }} max={{ maximumCarPrice }} value={{ maximumCarPrice }} step={{ (maximumCarPrice - minimumCarPrice) / 20 }}|round >
        </div>
    </div>
    <!-- Card Container -->
        {% include 'frontend/Warehouse/filteredCars.html.twig' with { cars: cars } %}
</div>
<!-- Hidden map modal -->
<div id="mapModal" class="floating-container hidden">
    <div class="modal-content" style="display: flex; flex-direction: column; align-items: center;">
        <div id="map" style="width: 100%; height: 400px;"></div>
        <div style="margin-top: 15px;">
            <button onclick="confirmMapSelection()">Confirm</button>
            <button onclick="resetMapFilter()">Reset</button>
        </div>
    </div>
    <div id="mapOverlay" class="modal-overlay-map hidden"></div>
</div>
<div id="specs-modal" class="specsModal hidden">
  <div class="specsmodal-content">
    <span class="specsModal-close" onclick="closeSpecsModal()">Ã—</span>
    <h2 class="specsModal-title">AI Car Specifications</h2>
    <div id="specs-modal-body" class="specsModal-body"></div>
  </div>
</div>


<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="{{ asset('js/Warehouse/browseCatalogue.js') }}"></script>
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
<!-- AJAX -->
<script>
//Basic features bar
const filterState = {
    brand: 'all',
    city: 'all',
    sliderValue: document.getElementById('slider').value,
    direction: 'ASC'
};

//DROPDOWN MENU FILTER BRAND
function toggleDropdownFilterBrand() {
    const dropdown = document.getElementById("dropdown-filter-brand");
    dropdown.classList.toggle("show");
  }
  window.onclick = function(event) {
    if (!event.target.closest('.dropdown-filter-button')) {
      const dropdownFilter = document.getElementById("dropdown-filter-brand");
      if (dropdownFilter && dropdownFilter.classList.contains("show")) {
        dropdownFilter.classList.remove("show");
      }
    }
  }
  
// AJAX for sorting cars
function sortCars() {
    const sortBtn = document.getElementById("sort-btn");
    const sorth3 = document.getElementById("sort-h3");

    const newDir = filterState.direction === "ASC" ? "DESC" : "ASC";
    filterState.direction = newDir;

    sortBtn.value = newDir;
    if(newDir==="ASC") sorth3.innerHTML=`Sort by price <svg xmlns="http://www.w3.org/2000/svg" height=12 width=12 viewBox="0 0 320 512"><path fill="#fff" d="M2 334.5c-3.8 8.8-2 19 4.6 26l136 144c4.5 4.8 10.8 7.5 17.4 7.5s12.9-2.7 17.4-7.5l136-144c6.6-7 8.4-17.2 4.6-26s-12.5-14.5-22-14.5l-72 0 0-288c0-17.7-14.3-32-32-32L128 0C110.3 0 96 14.3 96 32l0 288-72 0c-9.6 0-18.2 5.7-22 14.5z"/></svg>`;
    else sorth3.innerHTML=`Sort by price <svg xmlns="http://www.w3.org/2000/svg" height=12 width=12 viewBox="0 0 320 512"><path fill="#fff" d="M318 177.5c3.8-8.8 2-19-4.6-26l-136-144C172.9 2.7 166.6 0 160 0s-12.9 2.7-17.4 7.5l-136 144c-6.6 7-8.4 17.2-4.6 26S14.4 192 24 192l72 0 0 288c0 17.7 14.3 32 32 32l64 0c17.7 0 32-14.3 32-32l0-288 72 0c9.6 0 18.2-5.7 22-14.5z"/></svg>`;
    fetchFilteredCars(); 
}

// AJAX for filtering by brand
document.querySelectorAll('.brand-option').forEach(option => {
    option.addEventListener('click', function (e) {
        e.preventDefault();
        document.getElementById('filter-model').innerHTML=`${this.dataset.brand} <svg xmlns="http://www.w3.org/2000/svg" height=12 width=12 viewBox="0 0 320 512"><path fill="#fff" d="M137.4 374.6c12.5 12.5 32.8 12.5 45.3 0l128-128c9.2-9.2 11.9-22.9 6.9-34.9s-16.6-19.8-29.6-19.8L32 192c-12.9 0-24.6 7.8-29.6 19.8s-2.2 25.7 6.9 34.9l128 128z"/></svg>`
        filterState.brand = this.dataset.brand;
        fetchFilteredCars();
    });
});

//AJAX for filtering price by slider
document.getElementById('slider').addEventListener('input', function () {
    document.getElementById('price-up-to').textContent = `${this.value} DT`;

});
document.getElementById('slider').addEventListener('change', function () {
    filterState.sliderValue = this.value;
    fetchFilteredCars();
});
//Map initialization
let selectedCoords = null;

    function toggleMapFilter() {
        document.getElementById("mapModal").classList.remove("hidden");
        document.getElementById("mapOverlay").classList.remove("hidden");

        if (!window.mapInitialized) {
            initMap();
            window.mapInitialized = true;
        }
    }

    function closeMapModal() {
        document.getElementById("mapModal").classList.add("hidden");
        document.getElementById("mapOverlay").classList.add("hidden");
    }

    document.getElementById("mapOverlay").addEventListener("click", closeMapModal);

    
    function resetMapFilter() {
        filterState.city = "all";
        document.getElementById("mapModal").classList.add("hidden");
        document.getElementById('map-btn').innerHTML=`<svg xmlns="http://www.w3.org/2000/svg" height=16 width=16 viewBox="0 0 576 512"><path fill="#fff" d="M408 120c0 54.6-73.1 151.9-105.2 192c-7.7 9.6-22 9.6-29.6 0C241.1 271.9 168 174.6 168 120C168 53.7 221.7 0 288 0s120 53.7 120 120zm8 80.4c3.5-6.9 6.7-13.8 9.6-20.6c.5-1.2 1-2.5 1.5-3.7l116-46.4C558.9 123.4 576 135 576 152l0 270.8c0 9.8-6 18.6-15.1 22.3L416 503l0-302.6zM137.6 138.3c2.4 14.1 7.2 28.3 12.8 41.5c2.9 6.8 6.1 13.7 9.6 20.6l0 251.4L32.9 502.7C17.1 509 0 497.4 0 480.4L0 209.6c0-9.8 6-18.6 15.1-22.3l122.6-49zM327.8 332c13.9-17.4 35.7-45.7 56.2-77l0 249.3L192 449.4 192 255c20.5 31.3 42.3 59.6 56.2 77c20.5 25.6 59.1 25.6 79.6 0zM288 152a40 40 0 1 0 0-80 40 40 0 1 0 0 80z"/></svg>`
        fetchFilteredCars();
    }

    function initMap() {
        const map = L.map('map').setView([33.8869, 9.5375], 6); // Tunisia center
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);
    
        let marker = null;
    
        map.on('click', function (e) {
            if (marker) map.removeLayer(marker);
            selectedCoords = e.latlng;
            marker = L.marker(selectedCoords).addTo(map);
        });
    }
//Map selection (Coordinates: Longitude and latitude)
function confirmMapSelection() {
    if (!selectedCoords) {
        alert("Please select a location.");
        return;
    }

    fetch('{{ path("Front") }}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'X-Requested-With': 'XMLHttpRequest'
        },
        body: new URLSearchParams({
            lat: selectedCoords.lat,
            lon: selectedCoords.lng
        })
    })
    .then(res => res.json())
    .then(data => {
        console.log(data);
        if (data.city) {
            filterState.city = data.city;
            document.getElementById('map-btn').innerHTML=`<h3>${data.city}</h3>`
            document.getElementById("mapModal").classList.add("hidden");
            fetchFilteredCars();
        } else {
            
            alert("Could not determine city.");
        }
    })
    .catch(err => {
        console.error("Map city fetch error:", err);
        alert("Error determining city.");
    });
}
//Unified filtering function
async function fetchFilteredCars() {
    try {
        const response = await fetch('{{ path("Front") }}', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: new URLSearchParams(filterState)
        });

        const data = await response.json();

        if (data.success && data.html) {
            const container = document.querySelector('.card-container-browse');
            container.outerHTML = data.html; 
            rebindCardFunctions();
        } else {
            console.error("Fetch failed:", data.message || 'Unexpected error');
        }
    } catch (error) {
        console.error('AJAX error:', error);
    }
}

document.querySelectorAll('.ajax-buy-btn').forEach(button => {
    button.addEventListener('click', async function(e) {
        e.preventDefault();
        
        try {
            const response = await fetch('{{ path("Front") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Accept': 'application/json', 
                    'X-Requested-With': 'XMLHttpRequest' 
                },
                body: new URLSearchParams({
                    car_id: this.dataset.carId
                })
            });

            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                const text = await response.text();
                throw new Error(`Server returned HTML: ${text.substring(0, 100)}...`);
            }
            
            const data = await response.json();
            
            if (data.error) {
                throw new Error(data.message);
            }
            this.disabled = true;
            const slidingButtons = this.closest('.car-card').querySelector('.sliding-buttons');
            slidingButtons.classList.add('active');
            slidingButtons.querySelector('.proceed-btn').classList.remove('hidden');
            slidingButtons.querySelector('.canceling-btn').classList.remove('hidden');

        } catch (error) {
            console.error('Error:', error);
            alert(error.message);
        }
    });
});
// AJAX for Cancel Button
document.querySelectorAll('.ajax-canceling-btn').forEach(button => {
    button.addEventListener('click', async function(e) {
        e.preventDefault();
        const card = this.closest('.car-card');
        const slidingButtons = card.querySelector('.sliding-buttons');
        
        try {
            const response = await fetch('{{ path("Front") }}', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest' // Crucial for detecting AJAX
                },
                body: new URLSearchParams({
                    deleteBill: this.dataset.deleteBill
                })
            });

            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

         
            const data = await response.json();
            
            if (data.success) {
               
                slidingButtons.classList.remove('active');
                card.querySelector('.buy-btn').disabled = false;
                
              
                console.log('Bill deleted successfully');
            } else {
                throw new Error(data.message || 'Operation failed');
            }

        } catch (error) {
            console.error('Error:', error);
            // Show error to user without reloading
            alert('Error: ' + error.message);
        }
    });
});
document.querySelectorAll('.view-specs-btn').forEach(button => {
    button.addEventListener('click', async () => {
      const brand = button.dataset.brand.toLowerCase();
      const model = button.dataset.model.toLowerCase();
      const summary = await getGeminiSpecs(brand, model);
      showSpecsModal(summary);
  });
});
function showSpecsModal(summary) {
    const modal = document.getElementById('specs-modal');
    const body = document.getElementById('specs-modal-body');
  
    body.innerHTML = ''; 
    modal.classList.remove('hidden');
  
    setTimeout(() => {
      modal.classList.add('show');
      typeTextEffect(body, summary);
    }, 10);
  }
  
  function closeSpecsModal() {
    const modal = document.getElementById('specs-modal');
    modal.classList.remove('show');
    setTimeout(() => {
      modal.classList.add('hidden');
    }, 300);
  }
  function typeTextEffect(container, text, speed = 50) {
    const words = text.split(' ');
    let index = 0;
    container.innerHTML = '';
  
    function type() {
      if (index < words.length) {
        const word = words[index];
        container.innerHTML += word + ' ';
        index++;
        setTimeout(type, speed);
      }
    }
  
    type();
  }
  
async function getGeminiSpecs(brand, model) {
    const apiKey = 'AIzaSyC0socyIe4-vp1GmcJUhK_itlEdW_Xnnxk'; // store securely
    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;
  
    const prompt = `Give a complete and clear specification summary for the car: ${brand} ${model}.***Important***, do not say anything other than the features. I want it in this format,
        Brand: Toyota
        Model: Camry
        Engine: 2.5L 4-cylinder Dynamic Force,
        Horsepower: 203,
        Torque: 184,
        Transmission: 8-speed automatic,
        Dimensions: 
            Length: 489.458 cm
            Width: 183.896 cm
            Height: 144.526 cm
        Fuel Economy: 
            City: 28 mpg,
            Highway: 39 mpg
        Features: 
            Toyota Safety Sense 2.5+,
            8-inch touchscreen,
            Apple CarPlay/Android Auto
        {add some other specifications of your own, don't make this too long}
    `;
  
    const body = {
      contents: [
        {
          role: "user",
          parts: [{ text: prompt }]
        }
      ]
    };
  
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });
  
      if (!response.ok) {
        throw new Error(`Gemini API error: ${response.status}`);
      }
  
      const data = await response.json();
      const text = data.candidates?.[0]?.content?.parts?.[0]?.text || 'No response';
      return text;
  
    } catch (error) {
      console.error('Gemini fetch error:', error);
      return 'Failed to fetch specifications.';
    }
  }
</script>